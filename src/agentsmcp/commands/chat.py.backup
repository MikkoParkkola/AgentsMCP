from __future__ import annotations

import asyncio
import sys
from pathlib import Path
from typing import Optional

import click
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.table import Table

from ..agent_manager import AgentManager
from ..config import Config, ProviderType, ProviderConfig
from ..providers import list_models as providers_list_models, ProviderError
from ..providers_validate import validate_provider_config, ValidationResult
from ..config_write import persist_provider_api_key
from ..settings import AppSettings
from ..stream import generate_stream_from_text, openai_stream_text
import os

console = Console()


def _load_config(config_path: Optional[str]) -> Config:
    env = AppSettings()
    base: Config
    if config_path and Path(config_path).exists():
        base = Config.from_file(Path(config_path))
    elif Path("agentsmcp.yaml").exists():
        base = Config.from_file(Path("agentsmcp.yaml"))
    else:
        base = Config()
    return env.to_runtime_config(base)


def _save_config(cfg: Config, config_path: Optional[str]) -> Path:
    path = Path(config_path) if config_path else Path("agentsmcp.yaml")
    cfg.save_to_file(path)
    return path


@click.command("chat")
@click.option("--agent", "agent_type", default="codex", help="Agent type to use (codex/claude/ollama)")
@click.option("--model", "model_override", default=None, help="Model override for this session")
@click.option("--provider", "provider_override", default=None, type=click.Choice(["openai", "openrouter", "ollama", "custom"]))
@click.option("--api-base", "api_base_override", default=None, help="API base URL override")
@click.option("--config", "config_path", default=None, help="Path to YAML config")
@click.option("--save-on-exit", is_flag=True, default=False, help="Save session settings to config on exit")
@click.option("--system", "system_prompt", default=None, help="Session system prompt override")
def chat(
    agent_type: str,
    model_override: Optional[str],
    provider_override: Optional[str],
    api_base_override: Optional[str],
    config_path: Optional[str],
    save_on_exit: bool,
    system_prompt: Optional[str],
) -> None:
    """Interactive CLI AI client with configurable session and persistent settings.

    Commands:
      /help                 Show commands
      /model <name>         Set model for this session
      /provider <name>      Set provider (openai|openrouter|ollama|custom)
      /api_base <url>       Set API base URL for this session
      /system               Edit system prompt for this session
      /temp <0..2>          Set temperature
      /new                  Start a new session (keeps settings)
      /mcp                  Manage MCP servers (list/enable/disable)
      /save                 Save current settings to config file
      /quit                 Exit
    """
    cfg = _load_config(config_path)
    if agent_type not in cfg.agents:
        raise click.ClickException(f"Unknown agent type: {agent_type}")

    ac = cfg.agents[agent_type]
    # Apply session overrides
    if model_override:
        ac.model = model_override
    if provider_override:
        ac.provider = ProviderType(provider_override)
    if api_base_override:
        ac.api_base = api_base_override
    if system_prompt:
        ac.system_prompt = system_prompt

    # Manager for ad-hoc task runs
    mgr = AgentManager(cfg)
    context_percent = 0  # X2: percentage of a fixed context budget to include

    def _header() -> Panel:
        prov = getattr(ac, "provider", ProviderType.OPENAI).value
        model = ac.model or (ac.model_priority[0] if ac.model_priority else "(auto)")
        sysline = (ac.system_prompt[:80] + "â€¦") if ac.system_prompt and len(ac.system_prompt) > 80 else (ac.system_prompt or "default")
        return Panel.fit(
            f"Agent: [bold]{agent_type}[/bold]  Provider: [bold]{prov}[/bold]  Model: [bold]{model}[/bold]\nSystem: {sysline}",
            title="AgentsMCP Chat",
        )

    def _help() -> None:
        console.print(_header())
        console.print(
            """
[bold]/help[/bold]                 Show commands
[bold]/models [provider] [/bold]   List available models (default: current provider)
[bold]/apikey [provider][/bold]    Set/persist API key for a provider (masked input)
[bold]/model <name>[/bold]         Set model for this session
[bold]/provider <name>[/bold]      Set provider (openai|openrouter|ollama|custom)
[bold]/api_base <url>[/bold]       Set API base URL for this session
[bold]/system[/bold]               Edit system prompt for this session
[bold]/temp <0..2>[/bold]          Set temperature
[bold]/context <percent|off>[/bold] Set how much recent chat to include
[bold]/stream on|off[/bold]        Toggle incremental output rendering
[bold]/new[/bold]                  Start a new session (keeps settings)
[bold]/mcp[/bold]                  Manage MCP servers (list/enable/disable)
[bold]/save[/bold]                 Save current settings to config file
[bold]/quit[/bold]                 Exit
            """
        )

    async def _ask_once(prompt: str) -> str:
        # Spawn ephemeral job using current settings
        final_prompt = prompt
        if context_percent > 0 and history:
            # Apply simple trimming of prior messages into the prompt preamble
            from ..context import trim_history

            budget = int(2000 * (context_percent / 100.0))
            trimmed = trim_history(history, budget)
            if trimmed:
                pre = []
                for role, text in trimmed[-8:]:  # cap to last few items to be safe
                    pre.append(f"{role}: {text}")
                pre.append(f"user: {prompt}")
                final_prompt = "\n".join(pre)
        job_id = await mgr.spawn_agent(agent_type, final_prompt, timeout=ac.timeout)
        status = await mgr.wait_for_completion(job_id)
        return status.output or status.error or "(no output)"

    async def _ask_once_stream(prompt: str) -> str:
        """Render response incrementally.

        If AGENTSMCP_NATIVE_STREAM=1 and provider=openai with a valid API key, use
        OpenAI native streaming; otherwise fall back to chunking the final output.
        """
        # Determine provider
        try:
            prov = getattr(ac, "provider", ProviderType.OPENAI)
        except Exception:
            prov = ProviderType.OPENAI

        native = os.getenv("AGENTSMCP_NATIVE_STREAM") == "1" and prov == ProviderType.OPENAI

        # Build final_prompt with optional context trimming
        final_prompt = prompt
        if context_percent > 0 and history:
            from ..context import trim_history

            budget = int(2000 * (context_percent / 100.0))
            trimmed = trim_history(history, budget)
            if trimmed:
                pre = []
                for role, text in trimmed[-8:]:  # last few messages only
                    pre.append(f"{role}: {text}")
                pre.append(f"user: {prompt}")
                final_prompt = "\n".join(pre)

        if native:
            # Resolve OpenAI API key and base URL
            base_cfg = cfg.providers.get(ProviderType.OPENAI.value) if hasattr(cfg, "providers") else None
            api_key = (base_cfg.api_key if base_cfg and getattr(base_cfg, "api_key", None) else None) or os.getenv("OPENAI_API_KEY")
            api_base = ac.api_base or (base_cfg.api_base if base_cfg else None)
            model = ac.model or (ac.model_priority[0] if ac.model_priority else "gpt-4")
            if api_key:
                buffer = ""
                try:
                    for ch in openai_stream_text(api_key, api_base, model, final_prompt, getattr(ac, "temperature", 0.7)):
                        buffer += ch.text
                        console.print(ch.text, end="")
                    console.print()
                    return buffer
                except Exception:
                    # fall back below
                    pass

        # Fallback streaming by chunking the final output
        final = await _ask_once(prompt)
        buffer = ""
        for ch in generate_stream_from_text(final):
            buffer += ch.text
            console.print(ch.text, end="")
        console.print()
        return buffer

    def _mcp_menu() -> None:
        while True:
            table = Table(title="MCP Servers (toggle with 'enable <name>' / 'disable <name>')")
            table.add_column("Name")
            table.add_column("Enabled")
            table.add_column("Transport")
            table.add_column("Command/URL")
            for s in cfg.mcp or []:
                cmd = " ".join(s.command or []) if s.command else (s.url or "")
                table.add_row(s.name, "yes" if s.enabled else "no", s.transport or "stdio", cmd)
            console.print(table)
            cmd = Prompt.ask("mcp> ", default="back")
            if cmd.strip() in ("back", "exit", "quit"):
                break
            parts = cmd.split()
            if len(parts) >= 2:
                action, name = parts[0], parts[1]
                match action:
                    case "enable":
                        for s in cfg.mcp or []:
                            if s.name == name:
                                s.enabled = True
                                console.print(f"Enabled {name}")
                                break
                        else:
                            console.print(f"Unknown MCP: {name}")
                    case "disable":
                        for s in cfg.mcp or []:
                            if s.name == name:
                                s.enabled = False
                                console.print(f"Disabled {name}")
                                break
                        else:
                            console.print(f"Unknown MCP: {name}")
                    case _:
                        console.print("Unknown action. Use 'enable <name>' or 'disable <name>'.")
            else:
                console.print("Commands: enable <name>, disable <name>, back")

    console.print(_header())
    _help()

    history: list[tuple[str, str]] = []  # (role, text)

    while True:
        try:
            user = Prompt.ask("you")
        except (KeyboardInterrupt, EOFError):
            console.print("\nExitingâ€¦")
            break

        if not user.strip():
            continue

        if user.startswith("/"):
            parts = user[1:].split()
            cmd = parts[0]
            args = parts[1:]
            if cmd == "help":
                _help()
                continue
            if cmd == "apikey":
                # Determine provider: arg or current session provider
                prov = None
                if args:
                    try:
                        prov = ProviderType(args[0])
                    except Exception:
                        console.print("Invalid provider. Use openai|openrouter|ollama|custom")
                        continue
                else:
                    prov = getattr(ac, "provider", ProviderType.OPENAI)

                new_key = Prompt.ask("Enter API key (input hidden)", password=True)
                # Update in-memory config providers + persist immediately
                try:
                    persist_provider_api_key(cfg, Path(config_path) if config_path else Path("agentsmcp.yaml"), prov, new_key)
                    console.print(f"Saved key for provider {prov.value}.")
                except Exception as e:
                    console.print(f"[red]Failed to persist key:[/red] {e}")
                continue
            if cmd == "models":
                # Determine provider: arg or current session provider
                prov = None
                if args:
                    try:
                        prov = ProviderType(args[0])
                    except Exception:
                        console.print("Invalid provider. Use openai|openrouter|ollama|custom")
                        continue
                else:
                    prov = getattr(ac, "provider", ProviderType.OPENAI)

                # Merge provider config with session overrides
                base_cfg = cfg.providers.get(prov.value) if hasattr(cfg, "providers") else None
                pconfig = ProviderConfig(
                    name=prov,
                    api_key=(base_cfg.api_key if base_cfg else None),
                    api_base=(ac.api_base or (base_cfg.api_base if base_cfg else None)),
                )
                # Validate provider before trying discovery (non-blocking)
                vcfg = ProviderConfig(
                    name=prov,
                    api_key=(base_cfg.api_key if base_cfg else None),
                    api_base=(ac.api_base or (base_cfg.api_base if base_cfg else None)),
                )
                vres: ValidationResult = validate_provider_config(prov, vcfg)
                if not vres.ok:
                    console.print(f"[yellow]Provider validation: {vres.reason}[/yellow] {vres.details or ''}  (you can set a key with /apikey {prov.value})")

                try:
                    models = providers_list_models(prov, pconfig)
                except ProviderError as e:
                    console.print(f"[red]Model discovery failed:[/red] {e}")
                    continue

                # Interactive filter + select loop
                filtered = models
                while True:
                    table = Table(title=f"Models for provider: {prov.value}")
                    table.add_column("#", justify="right")
                    table.add_column("Model ID")
                    table.add_column("Name")
                    for idx, m in enumerate(filtered, start=1):
                        table.add_row(str(idx), m.id, m.name or m.id)
                    if not filtered:
                        console.print(f"[yellow]No models matched filter for {prov.value}[/yellow]")
                    else:
                        console.print(table)
                    entry = Prompt.ask("models> filter text or number (Enter to exit)", default="")
                    if not entry.strip():
                        break
                    if entry.strip().isdigit():
                        sel = int(entry.strip())
                        if 1 <= sel <= len(filtered):
                            chosen = filtered[sel - 1]
                            ac.model = chosen.id
                            console.print(Panel.fit(f"Model set to [bold]{ac.model}[/bold]", title="Selected"))
                            console.print(_header())
                            break
                        else:
                            console.print("Invalid selection index.")
                            continue
                    needle = entry.strip().lower()
                    filtered = [m for m in models if needle in (m.id.lower() + " " + (m.name or "").lower())]
                continue
            if cmd == "quit":
                break
            if cmd == "model" and args:
                ac.model = " ".join(args)
                console.print(_header())
                continue
            if cmd == "provider" and args:
                try:
                    ac.provider = ProviderType(args[0])
                except Exception:
                    console.print("Invalid provider. Use openai|openrouter|ollama|custom")
                # Validate provider after selection and show a one-line banner
                prov = getattr(ac, "provider", ProviderType.OPENAI)
                base_cfg = cfg.providers.get(prov.value) if hasattr(cfg, "providers") else None
                vcfg = ProviderConfig(
                    name=prov,
                    api_key=(base_cfg.api_key if base_cfg else None),
                    api_base=(ac.api_base or (base_cfg.api_base if base_cfg else None)),
                )
                vres = validate_provider_config(prov, vcfg)
                if not vres.ok:
                    console.print(f"[yellow]Provider validation: {vres.reason}[/yellow] {vres.details or ''}  (set a key with /apikey {prov.value})")
                console.print(_header())
                continue
            if cmd == "provider" and not args:
                # Interactive provider selection from configured and known providers
                known = ["openai", "openrouter", "ollama", "custom"]
                configured = list(getattr(cfg, "providers", {}).keys()) if hasattr(cfg, "providers") else []
                display: list[str] = []
                for name in configured + known:
                    if name not in display:
                        display.append(name)
                table = Table(title="Providers")
                table.add_column("#", justify="right")
                table.add_column("Name")
                for i, name in enumerate(display, 1):
                    table.add_row(str(i), name)
                console.print(table)
                choice = Prompt.ask("provider> number (Enter to cancel)", default="")
                if choice.strip().isdigit():
                    idx = int(choice)
                    if 1 <= idx <= len(display):
                        try:
                            ac.provider = ProviderType(display[idx - 1])
                        except Exception:
                            console.print("Invalid selection.")
                        prov = getattr(ac, "provider", ProviderType.OPENAI)
                        base_cfg = cfg.providers.get(prov.value) if hasattr(cfg, "providers") else None
                        vcfg = ProviderConfig(
                            name=prov,
                            api_key=(base_cfg.api_key if base_cfg else None),
                            api_base=(ac.api_base or (base_cfg.api_base if base_cfg else None)),
                        )
                        vres = validate_provider_config(prov, vcfg)
                        if not vres.ok:
                            console.print(f"[yellow]Provider validation: {vres.reason}[/yellow] {vres.details or ''}  (set a key with /apikey {prov.value})")
                        console.print(_header())
                continue
            if cmd == "api_base" and args:
                ac.api_base = " ".join(args)
                console.print(_header())
                continue
            if cmd == "system":
                ac.system_prompt = Prompt.ask("System prompt", default=ac.system_prompt or "")
                console.print(_header())
                continue
            if cmd == "context" and args:
                arg = args[0].lower()
                if arg in ("off", "0"):
                    context_percent = 0
                    console.print("Context trimming disabled.")
                else:
                    try:
                        p = int(arg)
                        if 0 <= p <= 100:
                            context_percent = p
                            console.print(f"Context set to last ~{p}% of budget.")
                        else:
                            console.print("Context percent must be 0..100 or 'off'.")
                    except ValueError:
                        console.print("Usage: /context <percent|off>")
                continue
            if cmd == "temp" and args:
                try:
                    t = float(args[0])
                    if 0 <= t <= 2:
                        ac.temperature = t
                        console.print(_header())
                    else:
                        console.print("Temperature must be between 0 and 2")
                except ValueError:
                    console.print("Invalid number")
                continue
            if cmd == "new":
                history.clear()
                console.print(Panel.fit("New session started", title="Session"))
                continue
            if cmd == "stream" and args:
                val = args[0].lower()
                if val in ("on", "true", "1"):
                    stream_enabled = True
                    console.print("Streaming: on")
                elif val in ("off", "false", "0"):
                    stream_enabled = False
                    console.print("Streaming: off")
                else:
                    console.print("Usage: /stream on|off")
                continue
            if cmd == "mcp":
                _mcp_menu()
                continue
            if cmd == "save":
                path = _save_config(cfg, config_path)
                console.print(f"Saved settings to {path}")
                continue
            console.print("Unknown command. Type /help for options.")
            continue

        # Regular chat turn
        console.print(Panel.fit(user, title="You"))
        try:
            answer = asyncio.run(_ask_once_stream(user) if stream_enabled else _ask_once(user))
        except RuntimeError:
            # If running inside event loop (rare), fallback
            answer = "(execution error inside running loop)"
        history.append(("user", user))
        history.append(("assistant", answer))
        console.print(Panel(answer, title=f"{agent_type}"))

    if save_on_exit and Confirm.ask("Save session settings to config?", default=True):
        path = _save_config(cfg, config_path)
        console.print(f"Saved settings to {path}")

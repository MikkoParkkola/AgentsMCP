{
  "current_architecture": {
    "entry_points": {
      "cli_primary": {
        "file": "src/agentsmcp/cli.py",
        "description": "Main CLI entry point with hierarchical command structure",
        "features": [
          "Progressive disclosure with --advanced/-A flag",
          "Smart defaults for beginners",
          "Hierarchical command groups: init, run, knowledge, monitor, server, config",
          "Integration with agent management and orchestration"
        ],
        "commands": {
          "init": ["setup", "config", "demo"],
          "run": ["simple", "interactive", "chain", "orchestra", "symphony"],
          "knowledge": ["models", "rag", "index", "search"],
          "monitor": ["costs", "budget", "performance", "health"],
          "server": ["start", "stop", "status"],
          "config": ["show", "edit", "validate", "reset"]
        }
      },
      "tui_v2": {
        "file": "src/agentsmcp/ui/v2/main_app.py",
        "description": "Terminal User Interface v2 with component-based architecture",
        "features": [
          "Event-driven architecture with AsyncEventSystem",
          "Component registry for UI elements",
          "Input handler with immediate echo",
          "Terminal manager for capability detection",
          "Status manager for real-time updates"
        ],
        "components": [
          "ChatInterface",
          "InputHandler", 
          "TerminalManager",
          "StatusManager",
          "DisplayRenderer"
        ]
      },
      "web_interface": {
        "file": "src/agentsmcp/web/server.py", 
        "description": "FastAPI-based web server with comprehensive API",
        "features": [
          "RESTful API for agents, tasks, system status",
          "JWT authentication with refresh tokens",
          "Server-Sent Events (SSE) for real-time updates",
          "WebSocket support for bidirectional communication",
          "CORS, rate limiting, security middleware",
          "Static file serving for dashboard",
          "Health checks and metrics endpoints"
        ],
        "endpoints": {
          "auth": ["/login", "/refresh"],
          "agents": ["/", "/{agent_id}", "CRUD operations"],
          "tasks": ["/", "/{task_id}", "CRUD operations"],
          "system": ["/health", "/metrics", "/status", "/config/current"],
          "events": ["/agents (SSE)", "/ws/agents/{agent_id} (WebSocket)"]
        }
      }
    },
    "core_systems": {
      "agent_management": {
        "file": "src/agentsmcp/agent_manager.py",
        "description": "Central hub for agent lifecycle and job execution",
        "features": [
          "Multi-agent coordination with worker pools",
          "Role-based task routing via RoleRegistry", 
          "Per-provider concurrency limits and backpressure",
          "Async job queue with priority handling",
          "Storage backend abstraction (memory, sqlite, postgresql, redis)",
          "Event bus integration for job lifecycle notifications",
          "TaskEnvelope v1 structured task processing"
        ],
        "agent_types": ["codex", "claude", "ollama"]
      },
      "orchestration_symphony": {
        "file": "src/agentsmcp/orchestration/symphony_mode.py",
        "description": "Revolutionary multi-agent coordination system",
        "features": [
          "Conductor-based orchestration with harmony scoring",
          "Emotional state tracking for agents",
          "Dynamic load balancing and conflict resolution", 
          "Task complexity estimation and optimization",
          "Agent capability matching and performance tracking",
          "Real-time performance monitoring",
          "Graceful failure recovery with multiple strategies"
        ],
        "capabilities": [
          "Up to 12 agents simultaneously",
          "Agent specializations: full-stack, ui-ux, backend, devops, etc.",
          "Harmony matrix for agent compatibility",
          "Emotional resonance targeting",
          "Adaptive task assignment"
        ]
      },
      "configuration_system": {
        "files": ["src/agentsmcp/config/", "src/agentsmcp/runtime_config.py"],
        "description": "Robust configuration with environment detection",
        "features": [
          "User preference profiles for role-based optimization",
          "Task classification and team composition mapping",
          "Environment detection for API keys and capabilities",
          "Smart defaults for out-of-the-box operation",
          "YAML configuration with environment overrides",
          "RAG configuration management",
          "Provider configuration and validation"
        ]
      },
      "progressive_disclosure": {
        "file": "src/agentsmcp/progressive_disclosure.py",
        "description": "Advanced progressive disclosure system for CLI",
        "features": [
          "Simple vs Advanced mode switching with --advanced/-A flag",
          "Dynamic option filtering based on user expertise",
          "Smart defaults for beginners",
          "Contextual help hints and next-step suggestions",
          "Feature discovery tips in simple mode"
        ]
      }
    },
    "data_models": {
      "envelope_system": {
        "file": "src/agentsmcp/models.py",
        "description": "Stateless JSON envelope standard for API normalization",
        "features": [
          "TaskEnvelope v1 for structured task descriptions",
          "ResultEnvelope v1 for structured results with artifacts/metrics",
          "Versioned envelope format with backwards compatibility",
          "Job state management (pending, running, completed, failed, etc.)",
          "Error handling with structured error types"
        ]
      }
    },
    "specialized_modules": {
      "roles_system": {
        "directory": "src/agentsmcp/roles/",
        "description": "Role-based agent specialization",
        "roles": [
          "Architect - system design and planning",
          "Coder - implementation and coding tasks", 
          "QA - quality assurance and testing",
          "Docs - documentation generation",
          "MergeBot - code integration and deployment",
          "ProcessCoach - workflow optimization"
        ]
      },
      "rag_system": {
        "directory": "src/agentsmcp/rag/",
        "description": "Retrieval-Augmented Generation capabilities",
        "features": [
          "Vector store integration",
          "Document chunking and embedding",
          "Knowledge base ingestion and monitoring",
          "Freshness policies and update detection"
        ]
      },
      "cost_management": {
        "directory": "src/agentsmcp/cost/",
        "description": "Cost tracking and budget optimization",
        "features": [
          "Multi-provider cost tracking",
          "Budget alerts and limits",
          "Cost optimization recommendations",
          "Usage analytics and reporting"
        ]
      },
      "security_system": {
        "directory": "src/agentsmcp/security/",
        "description": "Human-in-the-loop security and approvals",
        "features": [
          "HITL approval workflows",
          "Risk assessment and classification",
          "Security manager with policy enforcement"
        ]
      }
    }
  },
  "feature_inventory": {
    "core_features": [
      "Multi-agent orchestration with Symphony Mode",
      "Progressive CLI with advanced/simple modes",
      "Web dashboard with real-time updates",
      "TUI v2 with component architecture",
      "Role-based task routing",
      "Cost tracking and budget management",
      "RAG knowledge management",
      "Human-in-the-loop approvals",
      "Multiple storage backends",
      "Event-driven architecture"
    ],
    "agent_capabilities": [
      "Support for Claude, Codex, and Ollama agents",
      "Async job execution with worker pools",
      "Per-provider concurrency limits",
      "Task complexity estimation",
      "Performance tracking and optimization",
      "Emotional state modeling",
      "Capability matching and load balancing"
    ],
    "user_experience": [
      "Progressive disclosure for novice vs expert users",
      "Smart defaults and contextual help",
      "Real-time feedback and status updates",
      "Multiple interface options (CLI, TUI, Web)",
      "Feature discovery tips and next-step suggestions",
      "Graceful error handling and recovery"
    ],
    "enterprise_features": [
      "JWT authentication with refresh tokens",
      "CORS and security middleware",
      "Health checks and metrics endpoints",
      "Prometheus metrics integration",
      "Structured logging with configurable levels",
      "Rate limiting and request validation"
    ]
  },
  "entry_point_matrix": {
    "cli_commands": {
      "init_setup": {
        "tui_equivalent": "Setup wizard in main menu",
        "web_equivalent": "Configuration page",
        "purpose": "First-time system configuration"
      },
      "run_simple": {
        "tui_equivalent": "Quick task execution interface",
        "web_equivalent": "Task creation form",
        "purpose": "Simple task execution for beginners"
      },
      "run_symphony": {
        "tui_equivalent": "Multi-agent coordination dashboard",
        "web_equivalent": "Symphony orchestration interface",
        "purpose": "Advanced multi-agent coordination"
      },
      "monitor_costs": {
        "tui_equivalent": "Cost dashboard component",
        "web_equivalent": "/costs.html dashboard",
        "purpose": "Real-time cost monitoring"
      },
      "knowledge_rag": {
        "tui_equivalent": "Knowledge management interface", 
        "web_equivalent": "RAG configuration page",
        "purpose": "Manage knowledge base and RAG"
      }
    },
    "coverage_gaps": [
      "TUI v2 lacks full feature parity with CLI commands",
      "Web interface missing some advanced orchestration features",
      "CLI advanced mode features not fully exposed in other interfaces",
      "Symphony mode primarily CLI-driven"
    ]
  },
  "integration_points": {
    "internal_connections": [
      "CLI -> AgentManager -> Agent instances",
      "Web API -> AgentManager -> Storage backends", 
      "TUI v2 -> EventSystem -> Component updates",
      "Symphony Mode -> AgentManager -> Role routing",
      "Configuration system -> All entry points",
      "Progressive disclosure -> CLI help system"
    ],
    "external_integrations": [
      "OpenAI API (Claude, Codex)",
      "Ollama local model server",
      "Vector databases for RAG",
      "Storage backends (SQLite, PostgreSQL, Redis)",
      "Prometheus metrics collection",
      "MCP (Model Context Protocol) servers"
    ]
  },
  "technical_debt_assessment": {
    "high_priority": [
      "TUI v1 to v2 migration incomplete",
      "Web interface static files need modernization",
      "CLI command structure could be more consistent",
      "Symphony mode integration with web interface",
      "Progressive disclosure implementation in TUI/Web"
    ],
    "medium_priority": [
      "Configuration management complexity",
      "Agent lifecycle management consistency",
      "Error handling standardization across interfaces",
      "Event system unification",
      "Storage backend abstraction improvements"
    ],
    "low_priority": [
      "Code organization and module dependencies",
      "Documentation and help text consistency",
      "Logging format standardization",
      "Test coverage improvements"
    ]
  },
  "user_experience_pain_points": [
    "Inconsistent feature availability across entry points",
    "Progressive disclosure not implemented in TUI/Web",
    "Complex configuration options without guided setup",
    "Limited real-time feedback in CLI mode",
    "Symphony mode primarily accessible via CLI",
    "Cost monitoring not integrated into all workflows"
  ],
  "improvement_opportunities": {
    "progressive_disclosure_gaps": [
      "TUI v2 needs beginner vs expert modes",
      "Web interface lacks progressive feature revelation",
      "CLI advanced features need better discovery",
      "Context-sensitive help not implemented everywhere"
    ],
    "interface_consistency": [
      "Unify command naming across entry points",
      "Standardize status/progress indicators", 
      "Consistent error messages and recovery",
      "Unified configuration management"
    ],
    "feature_completeness": [
      "Symphony mode in TUI and Web interfaces",
      "Full RAG management in all entry points",
      "Cost monitoring integration everywhere",
      "Security/HITL workflow accessibility"
    ]
  }
}
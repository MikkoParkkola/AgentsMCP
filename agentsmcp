#!/usr/bin/env python3
"""
AgentsMCP executable wrapper
This wrapper runs the AgentsMCP CLI with all latest fixes included.
Enhanced with convenient TUI access and improved user experience.
"""
import sys
import os
from pathlib import Path
import subprocess
from typing import List, Optional, Tuple

# Add src directory to Python path to ensure we use the latest code
repo_root = Path(__file__).parent
src_dir = repo_root / "src"
sys.path.insert(0, str(src_dir))

def check_python_version() -> bool:
    """Check if Python version meets minimum requirements."""
    if sys.version_info < (3, 8):
        print("‚ùå AgentsMCP requires Python 3.8 or higher")
        print(f"   Current version: {sys.version}")
        print("   Please upgrade Python to continue.")
        return False
    return True

def check_terminal_capabilities() -> Tuple[bool, List[str]]:
    """Check terminal capabilities for TUI functionality."""
    warnings = []
    
    # Check if running in TTY
    if not sys.stdin.isatty():
        warnings.append("Not running in a terminal (TTY)")
    
    # Check terminal size
    try:
        import shutil
        cols, rows = shutil.get_terminal_size()
        if cols < 80 or rows < 24:
            warnings.append(f"Small terminal size ({cols}x{rows}), recommend 80x24+")
    except Exception:
        warnings.append("Could not determine terminal size")
    
    # Check for color support
    if os.environ.get('TERM', '').lower() in ('dumb', ''):
        warnings.append("Limited color support detected")
    
    return len(warnings) == 0, warnings

def show_tui_help():
    """Display TUI-specific help information."""
    print("üé® AgentsMCP TUI - Modern Terminal User Interface")
    print("=" * 60)
    print()
    print("USAGE:")
    print("  ./agentsmcp tui [OPTIONS]          Start TUI with default settings")
    print("  ./agentsmcp ui [OPTIONS]           Alias for 'tui'")
    print()
    print("TUI BEHAVIOR:")
    print("  ‚Ä¢ Interactive mode: When run from a real terminal/TTY")
    print("  ‚Ä¢ Demo mode: When run from non-TTY environment (e.g., IDE)")
    print("  ‚Ä¢ Auto-detects environment and adapts accordingly")
    print()
    print("TUI OPTIONS:")
    print("  --chat                            Launch legacy chat interface (workspace is default)")
    print("  --theme {auto|light|dark}          Set color theme (default: auto)")
    print("  --no-welcome                       Skip welcome screen")
    print("  --debug                           Enable debug output")
    print("  --refresh-interval SECONDS        Auto-refresh rate (default: 2.0)")
    print("  --orchestrator-model MODEL        Set orchestrator model")
    print("  --agent AGENT                     Set default AI agent")
    print("  --help                            Show this help")
    print()
    print("AVAILABLE THEMES:")
    print("  auto     - Detect system theme preference")
    print("  light    - Light theme with dark text")
    print("  dark     - Dark theme with light text")
    print()
    print("COMMON AGENTS:")
    print("  ollama-turbo-coding    - Local Ollama for coding tasks")
    print("  ollama-turbo-general   - Local Ollama for general tasks")
    print("  codex                  - Remote Codex agent")
    print("  claude                 - Remote Claude agent")
    print("  ollama                 - Basic Ollama agent")
    print()
    print("EXAMPLES:")
    print("  ./agentsmcp tui                          # üöÄ Start workspace controller (default)")
    print("  ./agentsmcp tui --chat                   # Launch legacy chat interface")
    print("  ./agentsmcp ui --theme dark              # Dark theme")
    print("  ./agentsmcp tui --debug                  # Debug mode")
    print("  ./agentsmcp tui --no-welcome             # Skip intro")
    print("  ./agentsmcp tui --agent codex            # Use Codex agent")
    print("  ./agentsmcp ui --orchestrator-model o1   # Set orchestrator model")
    print()
    print("RICH TUI ACCESS:")
    print("  AGENTSMCP_FORCE_RICH=1 ./agentsmcp tui  # Force Rich interface")
    print("  export AGENTSMCP_FORCE_RICH=1           # Set persistent Rich mode")
    print()
    print("INTERACTIVE MODE (TTY):")
    print("  Ctrl+C     - Exit TUI")
    print("  /quit      - Exit command")
    print("  /help      - Show TUI help")
    print("  /clear     - Clear chat history")
    print()
    print("DEMO MODE (Non-TTY):")
    print("  ‚Ä¢ Shows Revolutionary TUI capabilities")
    print("  ‚Ä¢ Runs automated demonstration sequence")
    print("  ‚Ä¢ Exits automatically after demo completion")
    print()
    print("TROUBLESHOOTING:")
    print("  ‚Ä¢ Ensure terminal is at least 80x24 characters")
    print("  ‚Ä¢ Use a terminal with color support")
    print("  ‚Ä¢ Run with --debug for detailed error output")
    print("  ‚Ä¢ Check Python version >= 3.8")
    print("  ‚Ä¢ For legacy mode: ./agentsmcp run interactive --legacy")

def handle_tui_command(args: List[str]) -> int:
    """Handle TUI-specific command processing."""
    # Check for help first ‚Äî delegate to Click for consistent formatting
    if "--help" in args or "-h" in args:
        try:
            os.environ.setdefault("COLUMNS", "100")
            from agentsmcp.cli import main as cli_main
            cli_main()
            return 0
        except SystemExit as e:
            return e.code if e.code else 0
        except Exception:
            show_tui_help()
            return 0
    
    # System checks
    if not check_python_version():
        return 1
    
    terminal_ok, warnings = check_terminal_capabilities()
    
    # Show warnings but don't block startup
    if warnings:
        print("‚ö†Ô∏è  Terminal compatibility warnings:")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")
        print("   TUI may not display correctly, consider using a better terminal")
        print()
    
    # Parse arguments for legacy flag and chat flag
    debug_mode = "--debug" in args
    legacy_mode = "--legacy" in args
    chat_mode = "--chat" in args
    
    # Default behavior: Launch V4 workspace controller (unless --chat is specified)
    if not chat_mode and not legacy_mode:
        try:
            if debug_mode:
                print("üîß Debug: Launching v4 workspace controller (default)...")
            
            from agentsmcp.ui.v4.workspace_controller import main as workspace_main
            print("üöÄ Launching AgentsMCP Workspace Controller...")
            print("üí° Press 'h' for help, 'q' to quit")
            print("üí° Use --chat flag for legacy chat interface")
            workspace_main()
            return 0
        except ImportError as e:
            if debug_mode:
                print(f"üîß Debug: V4 workspace controller not available: {e}")
            print("‚ö†Ô∏è  V4 workspace controller not available, falling back to V3 chat...")
            # Fall through to V3 chat system
        except Exception as e:
            if debug_mode:
                print(f"üîß Debug: Workspace controller failed: {e}")
            print(f"‚ö†Ô∏è  Workspace controller failed ({e}), falling back to V3 chat...")
            # Fall through to V3 chat system
    
    # Chat mode (V3 system) - now requires explicit --chat flag
    if chat_mode or not legacy_mode:  # Still fall back here if V4 failed
        try:
            if debug_mode:
                print("üîß Debug: Launching V3 chat interface...")
            
            import asyncio
            from agentsmcp.ui.v3.tui_launcher import launch_tui
            
            if chat_mode:
                print("üöÄ Launching legacy chat interface...")
                print("üí° Use 'agentsmcp tui' without --chat for modern workspace controller")
            else:
                print("üöÄ Starting AI Command Composer as fallback...")
            
            exit_code = asyncio.run(launch_tui())
            
            if debug_mode:
                print(f"üîß Debug: V3 system completed with exit code: {exit_code}")
            
            # CRITICAL FIX: Exit immediately after V3 completes, don't fall through to V2
            sys.exit(exit_code)
            
        except ImportError as e:
            if debug_mode:
                print(f"üîß Debug: V3 import failed: {e}")
            print(f"‚ö†Ô∏è  V3 TUI not available ({e}), falling back to legacy system...")
        except Exception as e:
            if debug_mode:
                print(f"üîß Debug: V3 system failed: {e}")
            print(f"‚ö†Ô∏è  V3 TUI failed ({e}), falling back to legacy system...")
    else:
        if debug_mode:
            print("üîß Debug: Legacy mode requested, skipping v4 workspace and v3 systems...")
    
    # Fallback to legacy v2 system
    print("üîÑ Using legacy Revolutionary TUI system...")
    
    # Ensure v2 sane defaults when invoking TUI via wrapper
    try:
        os.environ.setdefault("AGENTS_TUI_ENABLE_V2", "1")
        os.environ.setdefault("AGENTS_TUI_V2_MINIMAL", "0")
        os.environ.setdefault("AGENTS_TUI_V2_BACKEND", "1")
        os.environ.setdefault("AGENTS_TUI_V2_BACKEND_PREWARM", "1")
        os.environ.setdefault("AGENTS_TUI_SUPPRESS_TIPS", "1")
    except Exception:
        pass
    
    # Parse TUI arguments and convert to CLI format for ui.cli_app.main()
    cli_args = []
    
    i = 1  # Skip 'tui' command
    while i < len(args):
        arg = args[i]
        
        if arg == "--theme":
            if i + 1 < len(args):
                theme = args[i + 1]
                if theme in ["auto", "light", "dark"]:
                    cli_args.extend(["--theme", theme])
                    i += 1
                else:
                    print(f"‚ùå Invalid theme: {theme}")
                    print("   Valid themes: auto, light, dark")
                    return 1
            else:
                print("‚ùå --theme requires a value")
                return 1
                
        elif arg == "--no-welcome":
            cli_args.append("--no-welcome")
            
        elif arg == "--debug":
            cli_args.append("--debug")
            
        elif arg == "--legacy":
            # Already handled above
            pass
            
        elif arg == "--refresh-interval":
            if i + 1 < len(args):
                try:
                    float(args[i + 1])  # Validate it's a number
                    cli_args.extend(["--refresh-interval", args[i + 1]])
                    i += 1
                except ValueError:
                    print(f"‚ùå Invalid refresh interval: {args[i + 1]}")
                    return 1
            else:
                print("‚ùå --refresh-interval requires a value")
                return 1
                
        elif arg == "--orchestrator-model":
            if i + 1 < len(args):
                print(f"‚ö†Ô∏è  --orchestrator-model option may not be supported in legacy TUI mode")
                i += 1
            else:
                print("‚ùå --orchestrator-model requires a value")
                return 1
                
        elif arg == "--agent":
            if i + 1 < len(args):
                print(f"‚ö†Ô∏è  --agent option may not be supported in legacy TUI mode")
                i += 1
            else:
                print("‚ùå --agent requires a value")
                return 1
                
        elif arg.startswith("--"):
            print(f"‚ùå Unknown TUI option: {arg}")
            print("   Use --help to see available options")
            return 1
        else:
            print(f"‚ùå Unexpected argument: {arg}")
            return 1
            
        i += 1
    
    try:
        # Import and run the legacy TUI with processed arguments
        if debug_mode:
            print(f"üîß Debug: Starting Legacy TUI with arguments: {cli_args}")
        
        # Convert CLI args to config and run the TUI
        if debug_mode:
            print("üîß Debug: Importing CLIApp and CLIConfig...")
        from agentsmcp.ui.cli_app import CLIApp, CLIConfig
        import asyncio
        
        if debug_mode:
            print("üîß Debug: Creating CLIConfig...")
        # Build config from CLI args
        config = CLIConfig()
        
        if debug_mode:
            print("üîß Debug: Parsing CLI arguments...")
        # Parse the processed CLI args
        i = 0
        while i < len(cli_args):
            arg = cli_args[i]
            if arg == "--theme" and i + 1 < len(cli_args):
                config.theme_mode = cli_args[i + 1]
                i += 1
            elif arg == "--no-welcome":
                config.show_welcome = False
            elif arg == "--debug":
                config.debug_mode = True
            elif arg == "--refresh-interval" and i + 1 < len(cli_args):
                try:
                    config.refresh_interval = float(cli_args[i + 1])
                    i += 1
                except ValueError:
                    pass
            i += 1
        
        if debug_mode:
            print(f"üîß Debug: Final config - debug_mode: {config.debug_mode}, theme: {getattr(config, 'theme_mode', 'default')}")
            print("üîß Debug: Creating CLIApp in TUI mode...")
        
        # Create CLI app in TUI mode
        app = CLIApp(config, mode="tui")
        
        if debug_mode:
            print("üîß Debug: Starting CLIApp with asyncio.run()...")
        
        result = asyncio.run(app.start())
        
        if debug_mode:
            print(f"üîß Debug: TUI session result: {result}")
            print("üîß Debug: TUI session completed normally")
        
        return 0
    except KeyboardInterrupt:
        print("\nüëã TUI stopped by user")
        return 0
    except Exception as e:
        print(f"‚ùå TUI failed to start: {e}")
        
        if debug_mode:
            print("\nüîß Debug: Full exception traceback:")
            import traceback
            traceback.print_exc()
            print(f"üîß Debug: Exception type: {type(e)}")
            print(f"üîß Debug: Exception args: {e.args}")
        
        print()
        print("TROUBLESHOOTING STEPS:")
        print("1. Check Python version: python3 --version")
        print("2. Verify terminal size and capabilities")
        print("3. Try running with --debug for more details")
        print("4. Use legacy mode: ./agentsmcp tui --legacy")
        return 1

def show_system_status() -> int:
    """Show system readiness for AgentsMCP TUI."""
    print("üîç AgentsMCP System Status Check")
    print("=" * 40)
    print()
    
    # Python version check
    python_ok = check_python_version()
    if python_ok:
        print("‚úÖ Python version: OK")
    else:
        print("‚ùå Python version: FAILED")
    
    # Terminal capabilities check
    terminal_ok, warnings = check_terminal_capabilities()
    if terminal_ok:
        print("‚úÖ Terminal capabilities: OK")
    else:
        print("‚ö†Ô∏è  Terminal capabilities: Issues detected")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")
    
    # Try to import core modules
    try:
        from agentsmcp import __version__
        print(f"‚úÖ AgentsMCP version: {__version__}")
        core_ok = True
    except ImportError as e:
        print(f"‚ùå AgentsMCP core: Import failed ({e})")
        core_ok = False
    
    # Try to import TUI modules
    try:
        from agentsmcp.ui.cli_app import CLIApp
        from agentsmcp.ui.v2.main_app import MainTUIApp
        print("‚úÖ TUI system: Available")
        tui_ok = True
    except ImportError as e:
        print(f"‚ùå TUI system: Import failed ({e})")
        tui_ok = False
    
    print()
    
    # Overall status
    overall_ok = python_ok and core_ok and tui_ok
    if overall_ok:
        print("üéâ Overall Status: READY")
        print("   You can start the TUI with: ./agentsmcp tui")
        if warnings:
            print("   Note: Terminal warnings may affect TUI display quality")
    else:
        print("‚ùå Overall Status: NOT READY")
        print("   Please fix the issues above before using TUI")
        
        # Provide specific guidance
        if not python_ok:
            print("   ‚Üí Upgrade Python to 3.8+")
        if not core_ok:
            print("   ‚Üí Check AgentsMCP installation")
        if not tui_ok:
            print("   ‚Üí TUI dependencies may be missing")
    
    print()
    return 0 if overall_ok else 1

def show_main_help():
    """Show enhanced help with TUI prominently featured."""
    print("üöÄ AgentsMCP - Revolutionary Multi-Agent Orchestration Platform")
    print("=" * 70)
    print()
    print("QUICK START:")
    print("  ./agentsmcp tui                   üé® Launch modern TUI (demo mode)")
    print("  ./agentsmcp ui                    üé® Alias for TUI")
    print("  ./agentsmcp status                üîç Check system readiness")
    print("  ./agentsmcp init setup            üõ†Ô∏è  First-time setup wizard")
    print()
    print("MAIN COMMANDS:")
    print("  tui, ui                          Modern terminal interface")
    print("  init                            Getting started & configuration")
    print("  run                             Core execution workflows")
    print("  monitor                         Cost tracking & observability")
    print("  knowledge                       Knowledge base & model management")
    print("  server                          Server lifecycle & integration")
    print("  config                          Configuration management")
    print()
    print("TUI NOTES:")
    print("  ‚Ä¢ TUI runs in demo mode when no TTY is available")
    print("  ‚Ä¢ For true interactive use, run from a real terminal/console")
    print("  ‚Ä¢ In non-TTY environments, TUI shows capabilities demonstration")
    print("  ‚Ä¢ Use AGENTSMCP_FORCE_RICH=1 for advanced Rich interface anywhere")
    print()
    print("TUI EXAMPLES:")
    print("  ./agentsmcp tui --theme dark     Dark theme")
    print("  ./agentsmcp ui --no-welcome      Skip welcome screen")
    print("  ./agentsmcp tui --debug          Debug mode")
    print()
    print("OTHER EXAMPLES:")
    print("  ./agentsmcp init setup           Interactive setup")
    print("  ./agentsmcp run simple \"task\"    Execute a task")
    print("  ./agentsmcp monitor costs        Show cost breakdown")
    print()
    print("For detailed help on any command: ./agentsmcp COMMAND --help")
    print("For TUI-specific help: ./agentsmcp tui --help")

def main():
    """Enhanced main wrapper with TUI convenience and error handling."""
    args = sys.argv[1:]
    
    # Handle no arguments - delegate to Click help for robust formatting
    if not args:
        try:
            # Normalize terminal width for consistent wrapping in various terminals
            os.environ.setdefault("COLUMNS", "100")
            from agentsmcp.cli import main as cli_main
            cli_main()
            return 0
        except SystemExit as e:
            return e.code if e.code else 0
        except Exception:
            show_main_help()
            return 0
    
    command = args[0].lower()
    
    # Handle TUI commands directly for better UX
    if command in ["tui", "ui"]:
        return handle_tui_command(args)
    
    # Handle help requests anywhere on the command line: delegate to Click
    if any(a in ("--help", "-h") for a in args):
        try:
            os.environ.setdefault("COLUMNS", "100")
            from agentsmcp.cli import main as cli_main
            cli_main()
            return 0
        except SystemExit as e:
            return e.code if e.code else 0
        except Exception:
            # Fallback to simple help if delegation fails
            show_main_help()
            return 0
    
    # Handle status check
    if command in ["status", "check"]:
        return show_system_status()
    
    # Handle version requests  
    if command in ["version", "--version", "-v"]:
        try:
            from agentsmcp import __version__
            print(f"AgentsMCP version {__version__}")
            return 0
        except ImportError:
            print("AgentsMCP version unknown")
            return 1
    
    # For all other commands, delegate to the main CLI
    try:
        from agentsmcp.cli import main as cli_main
        cli_main()
        return 0
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
        return 0
    except SystemExit as e:
        return e.code if e.code else 0
    except Exception as e:
        print(f"‚ùå Command failed: {e}")
        print()
        print("TROUBLESHOOTING:")
        print("‚Ä¢ Run with --debug for detailed error information")
        print("‚Ä¢ Check configuration: ./agentsmcp config validate")
        print("‚Ä¢ Try setup wizard: ./agentsmcp init setup")
        return 1

if __name__ == "__main__":
    sys.exit(main())

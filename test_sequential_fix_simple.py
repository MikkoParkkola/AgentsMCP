#!/usr/bin/env python3
"""Simple test to validate MCP sequential thinking integration fix."""

import sys
import os
from pathlib import Path

# Add the src directory to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_sequential_thinking_fix():
    """Test that the sequential thinking integration fix is properly implemented."""
    print("üß™ Testing MCP Sequential Thinking Integration Fix")
    print("=" * 60)
    
    try:
        # Test 1: Import and check sequential planner changes
        print("1Ô∏è‚É£ Testing sequential planner fix...")
        
        from agentsmcp.orchestration.sequential_planner import SequentialPlanner
        
        planner = SequentialPlanner()
        
        # Check if the method exists and has been updated
        if hasattr(planner, '_call_sequential_thinking_tool'):
            print("   ‚úÖ _call_sequential_thinking_tool method exists")
            
            # Check method source to see if it uses LLMClient
            import inspect
            method_source = inspect.getsource(planner._call_sequential_thinking_tool)
            
            if 'LLMClient' in method_source:
                print("   ‚úÖ Method now uses real LLMClient")
            else:
                print("   ‚ùå Method still uses mock implementation")
                return False
                
            if 'send_message' in method_source:
                print("   ‚úÖ Method calls LLM send_message (real execution)")
            else:
                print("   ‚ùå Method doesn't call LLM send_message")
                return False
                
            if 'fake' in method_source.lower() or 'mock' in method_source.lower():
                print("   ‚ö†Ô∏è Method may still contain mock/fake elements")
            else:
                print("   ‚úÖ No obvious mock/fake implementations found")
        else:
            print("   ‚ùå _call_sequential_thinking_tool method not found")
            return False
        
        # Test 2: Check LLM client MCP tools
        print("2Ô∏è‚É£ Testing LLM client MCP tools...")
        
        from agentsmcp.conversation.llm_client import LLMClient
        
        # Create instance to get MCP tools
        llm_client = LLMClient()
        mcp_tools = llm_client._get_mcp_tools()  # Call the method directly
        
        # Check if sequential thinking tool is included
        sequential_tool = None
        for tool in mcp_tools:
            if (tool.get("function", {}).get("name") == 
                "mcp__sequential-thinking__sequentialthinking"):
                sequential_tool = tool
                break
        
        if sequential_tool:
            print("   ‚úÖ Sequential thinking tool found in MCP tools")
            print(f"      Tool name: {sequential_tool['function']['name']}")
            print(f"      Description: {sequential_tool['function']['description'][:60]}...")
            
            # Check required parameters
            params = sequential_tool['function']['parameters']
            required = params.get('required', [])
            if 'thought' in required and 'nextThoughtNeeded' in required:
                print("   ‚úÖ Tool has required parameters for sequential thinking")
            else:
                print("   ‚ùå Tool missing required sequential thinking parameters")
                return False
        else:
            print("   ‚ùå Sequential thinking tool not found in MCP tools")
            return False
        
        # Test 3: Check parser methods
        print("3Ô∏è‚É£ Testing response parsing methods...")
        
        if hasattr(planner, '_parse_thinking_from_response'):
            print("   ‚úÖ _parse_thinking_from_response method exists")
        else:
            print("   ‚ùå _parse_thinking_from_response method missing")
            return False
        
        if hasattr(planner, '_create_thoughts_from_response'):
            print("   ‚úÖ _create_thoughts_from_response method exists")  
        else:
            print("   ‚ùå _create_thoughts_from_response method missing")
            return False
        
        # Test 4: Check task tracker integration
        print("4Ô∏è‚É£ Testing task tracker integration...")
        
        from agentsmcp.orchestration.task_tracker import TaskTracker
        
        task_tracker = TaskTracker()
        
        if hasattr(task_tracker, 'sequential_planner'):
            print("   ‚úÖ Task tracker has sequential_planner")
        else:
            print("   ‚ùå Task tracker missing sequential_planner")
            return False
        
        if hasattr(task_tracker, 'progress_display'):
            print("   ‚úÖ Task tracker has progress_display")
        else:
            print("   ‚ùå Task tracker missing progress_display")
            return False
        
        # Test 5: Check chat engine integration  
        print("5Ô∏è‚É£ Testing chat engine integration...")
        
        from agentsmcp.ui.v3.chat_engine import ChatEngine
        
        chat_engine = ChatEngine()
        
        if hasattr(chat_engine, 'task_tracker'):
            print("   ‚úÖ Chat engine has task_tracker")
        else:
            print("   ‚ùå Chat engine missing task_tracker")
            return False
        
        # Test 6: Integration architecture check
        print("6Ô∏è‚É£ Checking integration architecture...")
        
        # Verify that the components are properly connected
        if chat_engine.task_tracker.sequential_planner:
            print("   ‚úÖ Chat engine ‚Üí Task tracker ‚Üí Sequential planner chain exists")
        else:
            print("   ‚ùå Integration chain incomplete")
            return False
        
        print("\nüéâ MCP Sequential Thinking Integration Fix: SUCCESS!")
        print("\n‚úÖ All fixes validated:")
        print("‚Ä¢ Sequential planner now uses real LLMClient instead of mock")
        print("‚Ä¢ LLM client includes MCP sequential thinking tool")  
        print("‚Ä¢ Response parsing methods implemented")
        print("‚Ä¢ Task tracker properly integrates sequential planner")
        print("‚Ä¢ Chat engine connects to task tracker")
        print("‚Ä¢ End-to-end integration architecture intact")
        
        print("\nüí° Expected behavior changes:")
        print("‚Ä¢ Progress indicators will show real sequential thinking steps")
        print("‚Ä¢ Planning will use actual MCP tool, not fake simulation") 
        print("‚Ä¢ Complex requests will trigger genuine multi-step analysis")
        print("‚Ä¢ No more false positive '100% success' with no results")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_sequential_thinking_fix()
    sys.exit(0 if success else 1)
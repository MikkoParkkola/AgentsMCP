# Updated configuration to run self‑improvement loop after every user task
# ------------------------------------------------------------
# Existing configuration is kept unchanged; only the new sections are added
# at the end of the file.  The YAML is valid – the added keys are part of the
# top‑level configuration and will be read by the orchestrator (if it supports
# these flags).

# ------------------------------------------------------------
# Self‑Improvement Loop Settings
# ------------------------------------------------------------
self_improvement:
  # When "true" the platform will trigger the continuous‑improvement
  # coordinator automatically after each user‑initiated task finishes.
  enabled: true
  # Frequency options: "after_each_task", "hourly", "daily", "weekly".
  # We set it to the most aggressive mode requested by the user.
  frequency: after_each_task
  # If true, the orchestrator will return the improvement report as part of
  # the task response so the user can see the results immediately.
  expose_results_to_user: true
  # Optional: limit the size of the report (in tokens) to avoid flooding the UI.
  max_report_tokens: 1500

# ------------------------------------------------------------
# Post‑Task Improvement Coordinator Agent (auto‑spawned)
# ------------------------------------------------------------
agents:
  post_task_improvement_coordinator:
    type: improvement-coordinator
    provider: ollama-turbo
    model: gpt-oss:120b
    model_priority: ["gpt-oss:120b", "gpt-oss:20b"]
    system_prompt: |
      You are the post‑task self‑improvement coordinator. After every user task,
      you must:
        1. Retrieve the latest quality metrics (coverage, a11y score, performance,
           usability, etc.) from the metrics store.
        2. Compare them against the defined targets.
        3. Summarise any regressions or improvements.
        4. Propose concrete prompt adjustments for the agents that fell short.
        5. Return a concise report (max {{max_report_tokens}} tokens) that the
           user will see.
    tools: [filesystem, web_search]
    mcp: [git-mcp, agentsmcp-self]
    max_tokens: 3000
    temperature: 0.2

# ------------------------------------------------------------
# Note: The orchestrator must be configured to automatically spawn the above
# agent after each user‑initiated task when `self_improvement.enabled` is true.
# If the platform does not yet support this hook, the development team can
# implement it by adding a post‑task callback that invokes the
# `post_task_improvement_coordinator` agent and merges its output into the
# original task response.

# ------------------------------------------------------------
# End of added configuration – the rest of the original file remains
# unchanged.

# PRODUCTION SECRET TEMPLATE
# This is a template file showing the structure of secrets needed.
# In production, secrets should be managed via:
# 1. External secret management systems (AWS Secrets Manager, HashiCorp Vault, etc.)
# 2. Kubernetes External Secrets Operator
# 3. Helm with separate values files
# 4. CI/CD pipeline secret injection

apiVersion: v1
kind: Secret
metadata:
  name: agentsmcp-secrets
  namespace: agentsmcp
  labels:
    app: agentsmcp
    component: secrets
  annotations:
    # Rotate secrets regularly in production
    secret.agentsmcp.io/rotation-policy: "90d"
    secret.agentsmcp.io/created-by: "infrastructure-team"
type: Opaque
data:
  # JWT Secret Key for authentication (base64 encoded)
  # Generate with: openssl rand -base64 32 | base64 -w 0
  JWT_SECRET_KEY: PLACEHOLDER_JWT_SECRET_KEY_BASE64
  
  # OpenAI API Key (base64 encoded)
  # Set with: echo -n "sk-..." | base64 -w 0
  OPENAI_API_KEY: PLACEHOLDER_OPENAI_API_KEY_BASE64
  
  # Other provider API keys
  ANTHROPIC_API_KEY: PLACEHOLDER_ANTHROPIC_API_KEY_BASE64
  AZURE_OPENAI_API_KEY: PLACEHOLDER_AZURE_OPENAI_API_KEY_BASE64
  
  # Database credentials (if using external DB)
  DATABASE_URL: PLACEHOLDER_DATABASE_URL_BASE64
  REDIS_URL: PLACEHOLDER_REDIS_URL_BASE64
  REDIS_PASSWORD: PLACEHOLDER_REDIS_PASSWORD_BASE64
  
  # Monitoring and observability
  DATADOG_API_KEY: PLACEHOLDER_DATADOG_API_KEY_BASE64
  PROMETHEUS_API_TOKEN: PLACEHOLDER_PROMETHEUS_API_TOKEN_BASE64
  
  # External service integrations
  WEBHOOK_SECRET: PLACEHOLDER_WEBHOOK_SECRET_BASE64
  ENCRYPTION_KEY: PLACEHOLDER_ENCRYPTION_KEY_BASE64
  
  # Discovery and networking
  DISCOVERY_TOKEN: PLACEHOLDER_DISCOVERY_TOKEN_BASE64
  TLS_CERT: PLACEHOLDER_TLS_CERT_BASE64
  TLS_KEY: PLACEHOLDER_TLS_KEY_BASE64

---
# Template for TLS secret for HTTPS endpoints
apiVersion: v1
kind: Secret
metadata:
  name: agentsmcp-tls
  namespace: agentsmcp
  labels:
    app: agentsmcp
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # In production, use cert-manager for automatic certificate management
  tls.crt: PLACEHOLDER_TLS_CRT_BASE64
  tls.key: PLACEHOLDER_TLS_KEY_BASE64

---
# Registry secret for private container images
apiVersion: v1
kind: Secret
metadata:
  name: agentsmcp-registry
  namespace: agentsmcp
  labels:
    app: agentsmcp
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry authentication
  # Generate with: kubectl create secret docker-registry --dry-run=client -o yaml
  .dockerconfigjson: PLACEHOLDER_DOCKER_CONFIG_JSON_BASE64